import random
import statistics
import networkx as nx
import pandas as pd
from itertools import combinations
import numpy as np
import matplotlib.pyplot as plt
from factor_analyzer import FactorAnalyzer
from sklearn.decomposition import FactorAnalysis

seed = [[(0, 6), (0, 10), (0, 22), (0, 29), (0, 30), (0, 37), (0, 38), (0, 41), (0, 49), (1, 4), (1, 9), (1, 17),
          (1, 21), (1, 23), (1, 30), (1, 32), (1, 36), (1, 37), (1, 45), (1, 46), (2, 8), (2, 11), (2, 14), (2, 16),
          (2, 18), (2, 19), (2, 24), (2, 27), (2, 33), (2, 40), (2, 45), (3, 8), (3, 9), (3, 12), (3, 15), (3, 24),
          (3, 26), (3, 44), (4, 6), (4, 10), (4, 14), (4, 15), (4, 19), (4, 23), (4, 37), (4, 46), (5, 10), (5, 19),
          (5, 41), (6, 11), (6, 20), (6, 29), (6, 34), (6, 36), (6, 48), (7, 8), (7, 15), (7, 17), (7, 24), (7, 25),
          (7, 27), (7, 29), (7, 31), (7, 34), (7, 35), (7, 38), (7, 39), (7, 40), (8, 9), (8, 12), (8, 22), (8, 26),
          (8, 32), (8, 36), (8, 37), (8, 43), (8, 48), (9, 10), (9, 21), (9, 24), (9, 25), (9, 42), (9, 47),
          (9, 49), (10, 14), (10, 22), (10, 24), (10, 25), (10, 26), (10, 31), (10, 32), (10, 38), (10, 49),
          (11, 20), (11, 27), (11, 28), (11, 43), (11, 45), (11, 47), (12, 18), (12, 23), (12, 35), (12, 42),
          (12, 44), (12, 46), (13, 19), (13, 21), (13, 24), (13, 30), (13, 32), (13, 34), (13, 36), (13, 39),
          (13, 42), (14, 23), (14, 24), (14, 27), (14, 28), (14, 32), (14, 35), (14, 36), (14, 41), (14, 42),
          (14, 44), (14, 47), (15, 26), (15, 34), (15, 35), (15, 38), (15, 47), (16, 20), (16, 21), (16, 42),
          (17, 18), (17, 22), (17, 26), (17, 29), (17, 31), (17, 32), (17, 41), (17, 47), (18, 25), (18, 26),
          (18, 29), (18, 30), (18, 41), (18, 47), (18, 48), (19, 21), (19, 26), (19, 27), (19, 31), (19, 33),
          (19, 39), (19, 41), (19, 45), (20, 25), (20, 29), (20, 31), (20, 33), (20, 34), (20, 49), (21, 22),
          (21, 24), (21, 26), (21, 27), (21, 35), (21, 39), (21, 40), (21, 42), (21, 43), (21, 47), (21, 49),
          (22, 24), (22, 42), (22, 46), (22, 47), (23, 31), (23, 42), (23, 43), (23, 45), (23, 47), (24, 26),
          (24, 29), (24, 38), (24, 44), (25, 29), (25, 33), (25, 35), (25, 37), (25, 44), (27, 35), (27, 41),
          (27, 43), (27, 45), (27, 47), (27, 49), (28, 29), (28, 32), (28, 36), (28, 40), (29, 32), (29, 34),
          (29, 45), (30, 34), (30, 35), (30, 37), (30, 43), (30, 49), (31, 35), (31, 41), (31, 47), (31, 49),
          (32, 33), (32, 47), (32, 48), (34, 39), (34, 43), (34, 48), (35, 39), (35, 42), (35, 43), (35, 44),
          (35, 46), (35, 47), (36, 38), (36, 42), (36, 46), (36, 48), (36, 49), (37, 38), (37, 42), (37, 46),
          (37, 49), (38, 43), (39, 48), (39, 49), (40, 41), (40, 45), (42, 43), (42, 48), (42, 49), (43, 45),
          (43, 49), (45, 48), (46, 47), (47, 49)]
    , [(0, 23), (0, 28), (0, 4), (2, 37), (3, 11), (4, 2), (4, 43), (5, 8), (5, 15), (5, 18), (9, 6), (9, 20),
       (9, 49), (10, 46), (11, 36), (12, 1), (12, 45), (13, 24), (14, 48), (16, 26), (16, 30), (16, 41), (16, 47),
       (17, 21), (19, 40), (21, 32), (21, 44), (21, 12), (22, 39), (25, 42), (29, 14), (30, 5), (32, 7), (33, 16),
       (34, 13), (35, 34), (35, 17), (39, 27), (39, 3), (39, 38), (39, 9), (40, 33), (43, 22), (44, 25), (45, 19),
       (46, 31), (47, 10), (47, 29), (49, 35)]
    , [35]]
lattice = nx.Graph()
lattice.add_edge(0,1)
lattice.add_edge(1,2)
lattice.add_edge(2,3)
lattice.add_edge(3,4)
lattice.add_edge(5,6)
lattice.add_edge(6,7)
lattice.add_edge(7,8)
lattice.add_edge(8,9)
lattice.add_edge(10,11)
lattice.add_edge(11,12)
lattice.add_edge(12,13)
lattice.add_edge(13,14)
lattice.add_edge(15,16)
lattice.add_edge(16,17)
lattice.add_edge(17,18)
lattice.add_edge(18,19)
lattice.add_edge(20,21)
lattice.add_edge(21,22)
lattice.add_edge(22,23)
lattice.add_edge(23,24)
lattice.add_edge(0,5)
lattice.add_edge(5,10)
lattice.add_edge(10,15)
lattice.add_edge(15,20)
lattice.add_edge(1,6)
lattice.add_edge(6,11)
lattice.add_edge(11,16)
lattice.add_edge(16,21)
lattice.add_edge(2,7)
lattice.add_edge(7,12)
lattice.add_edge(12,17)
lattice.add_edge(17,22)
lattice.add_edge(3,8)
lattice.add_edge(8,13)
lattice.add_edge(13,18)
lattice.add_edge(18,23)
lattice.add_edge(4,9)
lattice.add_edge(9,14)
lattice.add_edge(14,19)
lattice.add_edge(19,24)


G=nx.Graph()
kite = nx.Graph()
kite.add_edge(0,1)
kite.add_edge(0,2)
kite.add_edge(0,5)
kite.add_edge(0,3)
kite.add_edge(1,3)
kite.add_edge(1,4)
kite.add_edge(1,6)
kite.add_edge(2,3)
kite.add_edge(2,5)
kite.add_edge(3,5)
kite.add_edge(3,6)
kite.add_edge(3,4)
kite.add_edge(4,6)
kite.add_edge(5,6)
kite.add_edge(5,7)
kite.add_edge(6,7)
kite.add_edge(7,8)
kite.add_edge(8,9)
kite.add_edge(9,10)


barb = nx.Graph()
barb.add_edge(0,1)
barb.add_edge(0,2)
barb.add_edge(0,5)
barb.add_edge(0,3)
barb.add_edge(1,3)
barb.add_edge(1,4)
barb.add_edge(1,6)
barb.add_edge(2,3)
barb.add_edge(2,5)
barb.add_edge(3,5)
barb.add_edge(3,6)
barb.add_edge(3,4)
barb.add_edge(4,6)
barb.add_edge(5,6)
barb.add_edge(5,7)
barb.add_edge(6,7)
barb.add_edge(7,8)
barb.add_edge(8,9)
barb.add_edge(9,10)
barb.add_edge(9,11)
barb.add_edge(10,11)
barb.add_edge(10,12)
barb.add_edge(10,15)
barb.add_edge(10,13)
barb.add_edge(11,13)
barb.add_edge(11,14)
barb.add_edge(11,16)
barb.add_edge(12,13)
barb.add_edge(12,15)
barb.add_edge(13,15)
barb.add_edge(13,14)
barb.add_edge(13,16)
barb.add_edge(14,16)
barb.add_edge(15,16)

exp = nx.Graph()
exp.add_edge(0,1)
exp.add_edge(1,2)
exp.add_edge(2,3)
exp.add_edge(3,4)
exp.add_edge(4,5)
exp.add_edge(5,6)
exp.add_edge(6,7)
exp.add_edge(7,8)
exp.add_edge(8,9)
exp.add_edge(9,10)
exp.add_edge(10,11)
exp.add_edge(11,12)
exp.add_edge(12,13)
exp.add_edge(13,14)
exp.add_edge(14,15)
exp.add_edge(15,16)
exp.add_edge(16,17)
exp.add_edge(17,18)
exp.add_edge(18,19)
exp.add_edge(19,20)
exp.add_edge(20,21)
exp.add_edge(21,22)
exp.add_edge(22,23)
exp.add_edge(23,24)
exp.add_edge(24,25)
#G.add_edges_from(seed[0])
#G=nx.watts_strogatz_graph(25,4,0.2)
#G=nx.fast_gnp_random_graph(10,1)
#G=lattice
G=exp
num = len(list(G.nodes))
samples = 1000
title='Clique Network'

print(nx.pagerank(lattice,max_iter=1000))
nx.draw(G,with_labels=True)
plt.show()


ultravertical = nx.DiGraph()
for n in range(num):
    ultravertical.add_edge(n, n + 1)

F=ultravertical


def test(G,randomness=True,verticality=True,cr7=True):
    opinionbanana=[]
    initial_opinion = []
    datas = []

    def Control_Centrality(F):
        length = len(F.nodes)
        i = 1

        def CC(F):
            pippa = F.out_degree()
            pippa1 = np.array(pippa)
            pippa2 = pippa1[pippa1[:, 1] != 0]
            F = F.subgraph(pippa2[:, 0])
            return F

        def layer(F):
            culo = [x for x in F.nodes if x not in CC(F).nodes]
            banana = [i] * len(culo)
            results = np.column_stack((culo, banana))
            return results

        results = layer(F)
        while len(results) < length:
            results = np.concatenate([results, layer(F)])
            results = np.unique(results, axis=0)
            i += 1
            F = CC(F)
            layer(F)
        return dict(zip(results[:, 0], (results[:, 1])))

    def tildealt(G):
        pl = 0
        steps = 500
        thr = 0
        nx.set_node_attributes(G, 0, name='threshold')
        for n in G.nodes:
            G.nodes[n]['threshold'] = thr
        F = ultravertical

        def combine(arr, s):
            return list(combinations(arr, s))
        BC = Control_Centrality(F)



        lll = combinations(G.nodes(), 2)
        cliques = list(nx.enumerate_all_cliques(G))
        triads = [i for i in cliques if len(i) == 3]
        simm = []
        for n in triads:
            for l in combine(n, 2):
                simm.append(l)

        simmelian = []
        for i in simm:
            if i not in simmelian:
                simmelian.append(i)

        simmelian = np.array(simmelian)

        nx.set_node_attributes(G, 0, name='relevance')

        for n in G.nodes:
            G.nodes[n]['relevance'] = np.random.beta(1, 2)
            initial_opinion.append(G.nodes[n]['relevance'])

        influence_matrix = np.matrix(np.zeros((num, num)))
        for i in G.nodes:
            influence_matrix[i, i] = 0.1
            for j in G.neighbors(i):
                if [i, j] in simmelian:
                    if BC[i] - BC[j] < 0:
                        influence_matrix[i, j] = 0.1
                    elif BC[i] - BC[j] > 0:
                        influence_matrix[i, j] = 0.1
                    elif BC[i] - BC[j] == 0:
                        influence_matrix[i, j] = 0.1
                elif [i, j] not in simmelian:
                    if BC[i] - BC[j] > 0:
                        influence_matrix[i, j] = 0.1
                    elif BC[i] - BC[j] < 0:
                        influence_matrix[i, j] = 0.1
                    elif BC[i] - BC[j] == 0:
                        influence_matrix[i, j] = 0.1

        influence_matrix_correct = np.matrix(np.zeros((num, num)))
        for i in range(num):
            for j in range(num):
                influence_matrix_correct[i, j] = influence_matrix[i, j] / np.sum(influence_matrix[i])

        probability_matrix = np.matrix(np.zeros((num, num)))
        for i in G.nodes:
            for j in G.neighbors(i):
                if i == j:
                    probability_matrix[i, j] = 1
                elif i == 24:
                    if j==25:
                        probability_matrix[i, j] = 0.1
                    else:
                        probability_matrix[i,j] = 1
                else:
                    probability_matrix[i, j] = 1

        def tilde(G):
            datoni = []
            K = G.copy()
            t = 0
            influence_matrices = []

            def event():

                P = K.copy()

                influence_matrix_real = np.matrix(np.zeros((num, num)))
                influence_matrix_tilde = np.matrix(np.zeros((num, num)))
                for i in K.nodes:
                    influence_matrix_real[i, i] = influence_matrix[i, i]
                    for j in K.neighbors(i):
                        if random.random() < probability_matrix[i, j]:
                            if P.nodes[j]['relevance'] > P.nodes[j]['threshold']:
                                influence_matrix_real[i, j] = influence_matrix[i, j]
                            else:
                                influence_matrix_real[i, j] = 0
                        else:
                            influence_matrix_real[i, j] = 0
                for i in K.nodes:
                    influence_matrix_tilde[i, i] = influence_matrix_real[i, i] / np.sum(influence_matrix_real[i],
                                                                                        axis=1)
                    for j in K.nodes:
                        influence_matrix_tilde[i, j] = influence_matrix_real[i, j] / np.sum(influence_matrix_real[i],
                                                                                            axis=1
                                                                                            )
                influence_matrices.append(influence_matrix_tilde)
                for i in K.nodes:
                    opchange = [P.nodes[i]['relevance'] * influence_matrix_tilde[i, i]]
                    for j in K.neighbors(i):
                        opchange.append(influence_matrix_tilde[i, j] * P.nodes[j]['relevance'])
                    K.nodes[i]["relevance"] = np.sum(opchange)
                return K

            while t != steps:
                datelli = []
                datini = []
                t += 1
                event()
                for n in K.nodes:
                    datelli.append(K.nodes[n]['relevance'])
                    if K.nodes[n]['relevance'] > K.nodes[n]['threshold']:
                        datini.append(n)
                pd.DataFrame({'x': datelli})
                datoni.append(datelli)
            """
            plt.plot(datoni, 'k', alpha=0.1)
            plt.title('DeGroot (classic)')

            plt.plot(np.mean(datoni, axis=1), 'r--', label='mean')
            plt.plot(np.median(datoni, axis=1), 'b', label='median')
            plt.legend()
            plt.grid()
            plt.show()
            """

            def matrixMul(a, n):
                if (n <= 1):
                    return a
                else:
                    return np.matmul(matrixMul(a, n - 1), a)

            def matrixMultt(a, n):
                tempArr = a
                for i in range(0, n):
                    tempArr = influence_matrices[i] @ tempArr
                return tempArr


            plt.clf()


            datas.append(np.array(matrixMultt(influence_matrices[0], steps)[1][0]))
            X_axis = np.arange(len(G.nodes))


            plt.bar(X_axis + 0.2, np.asarray(matrixMul(influence_matrix_correct, steps))[1], 0.4, alpha=0.7,
                    color='blue', label='without randomness')
            plt.bar(X_axis - 0.2, np.asarray(matrixMultt(influence_matrices[0], steps))[1], 0.4, alpha=0.7, color='red',
                    label='with randomness')

            plt.legend()


        while pl != samples:
            print(100*(pl/samples),'%')
            pl += 1
            tilde(G)
    tildealt(G)
    plt.show()
#    eigenCent_sorted = dict(sorted(nx.eigenvector_centrality(G).items(), key=lambda item: item[1], reverse=True))
    #betweenCent_sorted = dict(sorted(nx.betweenness_centrality(G).items(), key=lambda item: item[1], reverse=True))
    closenessCent_sorted = dict(sorted(nx.closeness_centrality(G).items(), key=lambda item: item[1], reverse=True))

    for n in range(samples):
        opinionbanana.append(datas[n][0]@ initial_opinion)
    banana=[]
    for n in range(len(datas)):
        banana.append(np.stack(datas[n][0]))

    mf = []
    quantiles = []
    for n in range(len(banana)):
        mf1=[]
        for m in range(len(banana[0])):
            mf1.append(banana[n][m])
        mf.append(mf1)
    for n in range(len(G.nodes())):
        culo=[]
        culo.append(0.75)
        culo.append(0.25)
        quantiles.append(culo)
    dataset=[]
    datasetmean=[]
    datasetmedian=[]
    datasetvariance=[]
    datasetcoefvariation=[]
    for n in range(len(list(G.nodes))):
        datasettino=[]
        for m in range(len(mf)):
            datasettino.append(mf[m][n])
        datasetmean.append(statistics.mean(datasettino))
        datasetmedian.append(statistics.median(datasettino))
        datasetcoefvariation.append(np.std(datasettino)/np.mean(datasettino))
        datasetvariance.append(statistics.variance(datasettino))
        print(np.std(datasettino),np.mean(datasettino))
    #dataset.append(datasetmean)
    #dataseteigen=[]
    datasetcloseness=[]
    datasetbetweenness=[]
    datasetdegree=[]
    datasetcontrol=[]
    for n in range(len(G.nodes())):
        datasetbetweenness.append(nx.betweenness_centrality(G)[n])
        #dataseteigen.append(nx.eigenvector_centrality(G)[n])
        datasetdegree.append(nx.degree_centrality(G)[n])
        datasetcontrol.append(Control_Centrality(F)[n])
        datasetcloseness.append(nx.closeness_centrality(G)[n])
    print(datasetvariance)
    dataset.append(datasetbetweenness)
    #dataset.append(dataseteigen)
    dataset.append(datasetcloseness)
    dataset.append(datasetdegree)
    dataset.append(datasetcontrol)
    dataset=pd.DataFrame(dataset).T
    cormatrix=dataset.corr()
    plt.show()
    plt.clf()
    fa=FactorAnalyzer
    fact_2c = FactorAnalysis(n_components=2)
    Factor=fact_2c.fit_transform(dataset)
    size = datasetmean
    s = [((s/np.max(size))* 10)**3 for s in size]
    print(datasetcoefvariation)
    """
    plt.scatter(Factor[:,0],Factor[:,1], c=datasetcoefvariation,cmap='winter', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1,ls='--')
    plt.axvline(x=0, linewidth=1,ls='--')
    plt.colorbar(label='Coefficient of variation of influence')
    plt.ylabel('Factor1')
    plt.xlabel('Factor2')
    plt.show()

    plt.scatter(Factor[:, 0], Factor[:, 1], c=datasetvariance, cmap='cool', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Variance of influence')
    plt.ylabel('Factor1')
    plt.xlabel('Factor2')
    plt.show()

    plt.scatter(dataseteigen, datasetmean, c=datasetcoefvariation, cmap='winter', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Coefficient of variation of influence')
    plt.ylabel('Influence (mean)')
    plt.xlabel('EigenCentrality')
    plt.show()
    plt.scatter(dataseteigen, datasetmean, c=datasetvariance, cmap='cool', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Variance of influence')
    plt.ylabel('Influence (mean)')
    plt.xlabel('EigenCentrality')
    plt.show()

    plt.scatter(dataseteigen, datasetmedian, c=datasetcoefvariation, cmap='winter', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Coefficient of variation of influence')
    plt.ylabel('Influence (median)')
    plt.xlabel('EigenCentrality')
    plt.show()
    plt.scatter(dataseteigen, datasetmedian, c=datasetvariance, cmap='cool', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Variance of influence')
    plt.ylabel('Influence (median)')
    plt.xlabel('EigenCentrality')
    plt.show()

    plt.scatter(dataseteigen, datasetdegree, c=datasetcoefvariation, cmap='winter', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Coefficient of variation of influence')
    plt.ylabel('DegreeCentrality')
    plt.xlabel('EigenCentrality')
    plt.show()
    plt.scatter(dataseteigen, datasetdegree, c=datasetvariance, cmap='cool', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Variance of influence')
    plt.ylabel('DegreeCentrality')
    plt.xlabel('EigenCentrality')
    plt.show()

    plt.scatter(datasetcontrol, datasetmean, c=datasetcoefvariation, cmap='winter', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Coefficient of variation of influence')
    plt.ylabel('Influence (mean)')
    plt.xlabel('Hierarchical level')
    plt.show()
    plt.scatter(datasetcontrol, datasetmean, c=datasetvariance, cmap='cool', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Variance of influence')
    plt.ylabel('Influence (mean)')
    plt.xlabel('Hierarchical level')
    plt.show()

    plt.scatter(datasetcontrol, dataseteigen, c=datasetcoefvariation, cmap='winter', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Coefficient of variation of influence')
    plt.ylabel('EigenCentrality')
    plt.xlabel('Hierarchical level')
    plt.show()
    plt.scatter(datasetcontrol, dataseteigen, c=datasetvariance, cmap='cool', s=s)
    plt.title(title)
    plt.axhline(y=0, linewidth=1, ls='--')
    plt.axvline(x=0, linewidth=1, ls='--')
    plt.colorbar(label='Variance of influence')
    plt.ylabel('EigenCentrality')
    plt.xlabel('Hierarchical level')
    plt.show()

    """

    fig = plt.figure(figsize=(10, 7))
    ax = fig.add_subplot(111)

    # Creating axes instance
    bp = ax.boxplot(pd.DataFrame(mf), patch_artist=True,
                    notch='True')

    for whisker in bp['whiskers']:
        whisker.set(color='#8B008B',
                    linewidth=1.5,
                    linestyle=":")

    for cap in bp['caps']:
        cap.set(color='#8B008B',
                linewidth=2)

    for mean in bp['medians']:
        mean.set(color='red',
                   linewidth=3)

    for flier in bp['fliers']:
        flier.set(marker='D',
                  color='#e7298a',
                  alpha=0.1)

    plt.title(title)
    print(datasetcontrol)
    plt.ylabel('Influence')
    plt.xlabel('Subject ID')
    ax.get_xaxis().tick_bottom()
    ax.get_yaxis().tick_left()
    plt.show()




    fig, ax = plt.subplots(1, 1, figsize=(8, 8))
    violin_parts = ax.violinplot(np.array(mf),showmeans=True,showextrema=True,showmedians=True,quantiles = quantiles)
    violin_parts['cmeans'].set_edgecolor('k')
    violin_parts['cmedians'].set_edgecolor('r')
    violin_parts['cquantiles'].set_edgecolor('b')
    violin_parts['cquantiles'].set_linewidth(2)
    plt.show()




    plt.show()




#test(G,randomness=False,verticality=False)
#test(G,randomness=False,verticality=True)
test(G,randomness=True,verticality=False, cr7=True)
#test(G,randomness=True,verticality=True)

